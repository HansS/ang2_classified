/// <reference path='../../typings/tsd.d.ts' />
var express = require('express');
var path = require('path');
var methodOverride = require('method-override');
var multer = require('multer');
var router = express.Router();
var Post_1 = require('../models/post/Post');
var storage = multer.diskStorage({
    destination: './built/client/uploads/',
    filename: function (req, file, cb) {
        cb(null, (Math.random().toString(36) + '00000000000000000').slice(2, 10) + Date.now() + path.extname(file.originalname));
    }
});
var upload = multer({ storage: storage });
router.use(methodOverride(function (req, res) {
    if (req.body && typeof req.body === 'object' && '_method' in req.body) {
        // look in urlencoded POST bodies and delete it
        var method = req.body._method;
        delete req.body._method;
        return method;
    }
}));
router.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
})
    .get('/', function (req, res) {
    //Post.find({ status: true }, (err, docs) => {
    Post_1.Post.find({}, function (err, docs) {
        res.status(200).json(docs);
    });
})
    .post('/upload', upload.array('uploads', 12), function (req, res, next) {
    res.status(200).json(req.files);
})
    .post('/create', function (req, res, next) {
    console.log(req.body);
    var b = req.body;
    var userId = '56ce79ee63b678a005c44b5c';
    // if (req.session["isLogin"] ) {
    // 	userId = req.session["user"]._id.toString();	
    // } 
    var post = new Post_1.Post({
        user_id: userId,
        title: b.title,
        category: b.category,
        price: b.price,
        description: b.description,
        images: b.images,
        name: b.name,
        phone: b.phone,
        state: b.state,
        city: b.city
    });
    console.log(post);
    post.save(function (err) {
        if (err) {
            res.json({ success: false, error: err });
            return;
        }
        res.json({ success: true, message: 'Successfully Post an Advertsment.' });
    });
})
    .get('/my', function (req, res) {
    Post_1.Post.find({}, function (err, docs) {
        var posts = [];
        var user = req.session["user"];
        if (req.session["isLogin"] && !user.admin) {
            for (var i = 0; i < docs.length; i++) {
                if (req.session["user"]._id == docs[i].user_id) {
                    posts.push(docs[i]);
                }
            }
        }
        else {
            for (var i = 0; i < docs.length; i++) {
                if (docs[i].status == true) {
                    posts.push(docs[i]);
                }
            }
        }
        res.json({ success: true, data: posts });
    });
})
    .get('/:id', function (req, res) {
    Post_1.Post.findOne({ _id: req.params.id }, function (err, docs) {
        (function (err) { return res.status(301).json(err); });
        res.status(200).json(docs);
    });
})
    .get('/:post_id/edit', function (req, res) {
    Post_1.Post.findOne({ _id: req.params.post_id }, function (err, docs) {
        if (err) {
            res.json({ success: false, error: err });
            return;
        }
        res.json({ success: true, data: docs });
    });
})
    .put('/:post_id', function (req, res) {
    var b = req.body;
    Post_1.Post.update({
        _id: req.params.post_id
    }, {
        title: b.title,
        category: b.category,
        price: b.price,
        description: b.description,
        name: b.name,
        phone: b.phone,
        state: b.state,
        city: b.city,
    }, function (err, post) {
        res.status(200).json({ message: 'Successfully Update Post', data: post });
    });
})
    .delete('/:post_id', function (req, res) {
    Post_1.Post.remove({ _id: req.params.post_id }, function () {
        res.status(200).json({ message: 'Successfully deleted' });
    });
});
module.exports = router;

//# sourceMappingURL=data:application/json;base64,
