// =======================
// reference TDS files ============
// =======================
/// <reference path='../typings/tsd.d.ts' />
// =======================
// get the packages we need ============
// =======================
var express = require('express'), logger = require('morgan'), cookieParser = require('cookie-parser'), bodyParser = require('body-parser'), expressSession = require('express-session'), mongoose = require('mongoose'), path = require('path'), http = require('http'), passport = require('passport'), localStrategy = require('passport-local').Strategy, debug = require('debug')('passport-mongo');
var authConfig_1 = require('./auth/authConfig');
// =======================
// Configration ============
// =======================
// create instance of express
var app = express();
// require routes
var account = require('./routes/account.js');
var post = require('./routes/post.js');
// define middleware
app.use(express.static(path.join(__dirname, '/../client')));
//app.use(express.static(path.join(__dirname, '/../../uploads')));
app.use('/favicon.ico', express.static(path.join(__dirname, '/../client/assets/images/favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(require('express-session')({
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
authConfig_1.default();
app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
});
// =======================
// Routes ============
// =======================
app.use('/', account);
app.use('/post', post);
// error hndlers
/*interface Error {
    status?: number;
}
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    //err.status = 404;
    next(err);
});*/
/*app.use(function(err, req, res) {
    res.status(err.status || 500);
    res.end(JSON.stringify({
        message: err.message,
        error: {}
    }));
});
*/
// =======================
// Server Start ============
// =======================
app.set('port', (process.env.PORT || 3000));
var server = http.createServer(app);
server.listen(app.get('port'), 'localhost');
server.on('listening', function () {
    debug('Express server started on port %s at %s', server.address().port, server.address().address);
});

//# sourceMappingURL=data:application/json;base64,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QUUsQ0FBQztBQUNSLENBQUMsQ0FBQyxDQUFDO0FBRUgsMEJBQTBCO0FBQzFCLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFdkIsZ0JBQWdCO0FBQ2hCOzs7Ozs7O0tBT0s7QUFFTDs7Ozs7OztFQU9FO0FBQ0YsMEJBQTBCO0FBQzFCLDRCQUE0QjtBQUM1QiwwQkFBMEI7QUFFMUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzVDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFO0lBQ3RCLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuRyxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyByZWZlcmVuY2UgVERTIGZpbGVzID09PT09PT09PT09PVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD0nLi4vdHlwaW5ncy90c2QuZC50cycgLz5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIGdldCB0aGUgcGFja2FnZXMgd2UgbmVlZCA9PT09PT09PT09PT1cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbnZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpLFxyXG4gICAgbG9nZ2VyID0gcmVxdWlyZSgnbW9yZ2FuJyksXHJcbiAgICBjb29raWVQYXJzZXIgPSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyksXHJcbiAgICBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKSxcclxuICAgIGV4cHJlc3NTZXNzaW9uID0gcmVxdWlyZSgnZXhwcmVzcy1zZXNzaW9uJyksXHJcbiAgICBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyksXHJcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxyXG4gICAgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKSxcclxuICAgIHBhc3Nwb3J0ID0gcmVxdWlyZSgncGFzc3BvcnQnKSxcclxuICAgIGxvY2FsU3RyYXRlZ3kgPSByZXF1aXJlKCdwYXNzcG9ydC1sb2NhbCcpLlN0cmF0ZWd5LFxyXG4gICAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdwYXNzcG9ydC1tb25nbycpO1xyXG4gICAgXHJcbiAgICBpbXBvcnQgcGFzc3BvcnRDb25mIGZyb20gJy4vYXV0aC9hdXRoQ29uZmlnJztcclxuICAgIGltcG9ydCByZXN0cmljdCBmcm9tICcuL2F1dGgvcmVzdHJpY3QnO1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBDb25maWdyYXRpb24gPT09PT09PT09PT09XHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBjcmVhdGUgaW5zdGFuY2Ugb2YgZXhwcmVzc1xyXG52YXIgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuLy8gcmVxdWlyZSByb3V0ZXNcclxudmFyIGFjY291bnQgPSByZXF1aXJlKCcuL3JvdXRlcy9hY2NvdW50LmpzJyk7XHJcbnZhciBwb3N0ID0gcmVxdWlyZSgnLi9yb3V0ZXMvcG9zdC5qcycpO1xyXG5cclxuLy8gZGVmaW5lIG1pZGRsZXdhcmVcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLy4uL2NsaWVudCcpKSk7XHJcbi8vYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLy4uLy4uL3VwbG9hZHMnKSkpO1xyXG5hcHAudXNlKCcvZmF2aWNvbi5pY28nLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLy4uL2NsaWVudC9hc3NldHMvaW1hZ2VzL2Zhdmljb24uaWNvJykpKVxyXG5cclxuYXBwLnVzZShsb2dnZXIoJ2RldicpKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcclxuYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XHJcbmFwcC51c2UocmVxdWlyZSgnZXhwcmVzcy1zZXNzaW9uJykoe1xyXG4gICAgc2VjcmV0OiAna2V5Ym9hcmQgY2F0JyxcclxuICAgIHJlc2F2ZTogZmFsc2UsXHJcbiAgICBzYXZlVW5pbml0aWFsaXplZDogZmFsc2VcclxufSkpO1xyXG5hcHAudXNlKHBhc3Nwb3J0LmluaXRpYWxpemUoKSk7XHJcbmFwcC51c2UocGFzc3BvcnQuc2Vzc2lvbigpKTtcclxucGFzc3BvcnRDb25mKCk7XHJcblxyXG5hcHAudXNlKGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0cmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XHJcbiAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ0dFVCxQVVQsUE9TVCxERUxFVEUnKTtcclxuXHRyZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLCBcIk9yaWdpbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgQ29udGVudC1UeXBlLCBBY2NlcHRcIik7XHJcblx0bmV4dCgpO1xyXG59KTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFJvdXRlcyA9PT09PT09PT09PT1cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT1cclxuYXBwLnVzZSgnLycsIGFjY291bnQpO1xyXG5hcHAudXNlKCcvcG9zdCcsIHBvc3QpO1xyXG5cclxuLy8gZXJyb3IgaG5kbGVyc1xyXG4vKmludGVyZmFjZSBFcnJvciB7XHJcbiAgICBzdGF0dXM/OiBudW1iZXI7XHJcbn1cclxuYXBwLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignTm90IEZvdW5kJyk7XHJcbiAgICAvL2Vyci5zdGF0dXMgPSA0MDQ7XHJcbiAgICBuZXh0KGVycik7XHJcbn0pOyovXHJcblxyXG4vKmFwcC51c2UoZnVuY3Rpb24oZXJyLCByZXEsIHJlcykge1xyXG5cdHJlcy5zdGF0dXMoZXJyLnN0YXR1cyB8fCA1MDApO1xyXG5cdHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xyXG5cdFx0bWVzc2FnZTogZXJyLm1lc3NhZ2UsXHJcblx0XHRlcnJvcjoge31cclxuXHR9KSk7XHJcbn0pO1xyXG4qL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTZXJ2ZXIgU3RhcnQgPT09PT09PT09PT09XHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5hcHAuc2V0KCdwb3J0JywgKHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCkpO1xyXG52YXIgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcclxuc2VydmVyLmxpc3RlbihhcHAuZ2V0KCdwb3J0JyksICdsb2NhbGhvc3QnKTtcclxuc2VydmVyLm9uKCdsaXN0ZW5pbmcnLCBmdW5jdGlvbigpIHtcclxuXHRkZWJ1ZygnRXhwcmVzcyBzZXJ2ZXIgc3RhcnRlZCBvbiBwb3J0ICVzIGF0ICVzJywgc2VydmVyLmFkZHJlc3MoKS5wb3J0LCBzZXJ2ZXIuYWRkcmVzcygpLmFkZHJlc3MpO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
