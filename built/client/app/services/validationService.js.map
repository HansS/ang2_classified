{"version":3,"sources":["services/validationService.ts"],"names":["ValidationService","ValidationService.constructor","ValidationService.getValidatorErrorMessage","ValidationService.startsWithNumber","ValidationService.usernameTaken","ValidationService.creditCardValidator","ValidationService.emailValidator","ValidationService.passwordValidator"],"mappings":"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","file":"services/validationService.js","sourcesContent":["interface ValidationResult {\n    [key: string]: boolean;\n}\n\n\nexport class ValidationService {\n\n    static getValidatorErrorMessage(code: string) {\n        let config = {\n            'required': 'Field is Required',\n            'invalidCreditCard': 'Is invalid credit card number',\n            'invalidEmailAddress': 'Invalid email address',\n            'invalidPassword': 'Invalid password. Password must be at least 6 characters long, and contain a number.',\n            'startsWithNumber': 'Name can\\'t  Start With number',\n            'usernameTaken': 'Username Already Taken'\n        };\n\n        return config[code];\n    }\n\n    static startsWithNumber(control): ValidationResult {\n\n        if (control.value != \"\" && !isNaN(control.value.charAt(0))) {\n            return { \"startsWithNumber\": true };\n        } else {\n            return null;\n        }\n    }\n\n    static usernameTaken(control): Promise<ValidationResult> {\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (control.value === \"anismomin1\") {\n                    resolve({ \"usernameTaken\": true })\n                } else {\n                    resolve(null);\n                };\n\n            }, 1000);\n        });\n\n    }\n\n    static creditCardValidator(control) {\n        // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n        if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n            return null;\n        } else {\n            return { 'invalidCreditCard': true };\n        }\n    }\n\n    static emailValidator(control) {\n        // RFC 2822 compliant regex\n        if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n            return null;\n        } else {\n            return { 'invalidEmailAddress': true };\n        }\n    }\n\n    static passwordValidator(control) {\n        // {6,100}           - Assert password is between 6 and 100 characters\n        // (?=.*[0-9])       - Assert a string has at least one number\n        if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n            return null;\n        } else {\n            return { 'invalidPassword': true };\n        }\n    }\n}\n"],"sourceRoot":"/source/"}